/* Generated By:JavaCC: Do not edit this line. Gramatica.java */
/** Analizador de expresiones aritmeticas sencillas. */
package Analizador;
import Nodos.Temporal;
import Nodos.NodoAritmetico;
import Nodos.NodoLogico;
import Nodos.NodoIf;
import Nodos.NodoWhile;
import java.util.LinkedList;
import java.util.Arrays;

public class Gramatica implements GramaticaConstants {

    String codigoSalida = "";
    int contadorTemporales = 1;
    int contadorEtiquetas = 1;
    NodoAritmetico exp;

/** Fin Lexico */

/** ProducciÃ³n inicial 
    Analizar -> (Instruccion)+ EOF
*/
  final public void Analizar() throws ParseException {
 String s;
    s = Instrucciones();
                       System.out.println(s);
    jj_consume_token(0);
  }

  final public String Instrucciones() throws ParseException {
 String i = "";
String concatenar = "";
    label_1:
    while (true) {
      i = Instruccion();
                      concatenar = concatenar + i;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case EVALUAR:
      case IF:
      case CONDICION:
      case WHILE:
      case DO:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
    }
    {if (true) return concatenar;}
    throw new Error("Missing return statement in function");
  }

/** Instruccion -> evaluar [ Expresion ]; */
  final public String Instruccion() throws ParseException {
 NodoAritmetico e;
NodoLogico c;
NodoIf i;
NodoWhile w;
String s = "";
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EVALUAR:
      jj_consume_token(EVALUAR);
      e = Expresion();
      jj_consume_token(PCOMA);
                                       {if (true) return e.getCodigo();}
      break;
    case CONDICION:
      jj_consume_token(CONDICION);
      c = Condition();
      jj_consume_token(PCOMA);
                                       {if (true) return c.getCodigo();}
      break;
    case IF:
      i = Si();
            {if (true) return i.getInicio() + i.getFin();}
      break;
    case WHILE:
      w = While();
               {if (true) return w.getCodigo();}
      break;
    case DO:
      w = Do();
            {if (true) return w.getCodigo();}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** While -> DO { Instrucciones() } WHILE ( Condition() ) 
*/
  final public NodoWhile Do() throws ParseException {
 NodoLogico e;
NodoWhile i;
String s;
    jj_consume_token(DO);
    jj_consume_token(LLAI);
    s = Instrucciones();
    jj_consume_token(LLAD);
    jj_consume_token(WHILE);
    jj_consume_token(PARENI);
    e = Condition();
    jj_consume_token(PAREND);
        i = new NodoWhile(e.getVerdades().toString().substring(1, e.getVerdades().toString().length()-1) + ":\n" + s
        + e.getCodigo() + e.getMentiras().toString().substring(1, e.getMentiras().toString().length()-1) + ":\n" );
        {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

/** While -> WHILE ( Condition() ) { Instrucciones() }
*/
  final public NodoWhile While() throws ParseException {
 NodoLogico e;
NodoWhile i;
String s;
    jj_consume_token(WHILE);
    jj_consume_token(PARENI);
    e = Condition();
    jj_consume_token(PAREND);
    jj_consume_token(LLAI);
    s = Instrucciones();
    jj_consume_token(LLAD);
        i = new NodoWhile("L" + contadorEtiquetas + ":\n" + e.getCodigo() + e.getVerdades().toString().substring(1, e.getVerdades().toString().length()-1) + ":\n" + s
        + "go to L" + contadorEtiquetas++ + "\n" + e.getMentiras().toString().substring(1, e.getMentiras().toString().length()-1) + ":\n" );
        {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

/** Si -> IF ( Condition() ) { Instrucciones() }
        ( ELSE IF ( Condition() ) { Instrucciones() })*
        ( ELSE { Instrucciones() } )?
*/
  final public NodoIf Si() throws ParseException {
 NodoLogico e;
NodoIf i;
String s;
LinkedList<String> etiquetasSalida = new LinkedList<String>();
Boolean banderaElse = true;
    jj_consume_token(IF);
    jj_consume_token(PARENI);
    e = Condition();
    jj_consume_token(PAREND);
    jj_consume_token(LLAI);
    s = Instrucciones();
    jj_consume_token(LLAD);
        i = new NodoIf(e.getCodigo() + e.getVerdades().toString().substring(1, e.getVerdades().toString().length()-1) + ":\n" + s
        , e.getMentiras().toString().substring(1, e.getMentiras().toString().length()-1) + ":\n" );
    label_2:
    while (true) {
      if (jj_2_1(2)) {
        ;
      } else {
        break label_2;
      }
      jj_consume_token(ELSE);
      jj_consume_token(IF);
      jj_consume_token(PARENI);
                                          etiquetasSalida.add("L" + contadorEtiquetas++);
      e = Condition();
      jj_consume_token(PAREND);
      jj_consume_token(LLAI);
      s = Instrucciones();
      jj_consume_token(LLAD);
        i = new NodoIf(i.getInicio() + "go to " + etiquetasSalida.getLast() + "\n" +i.getFin() + e.getCodigo() + e.getVerdades().toString().substring(1, e.getVerdades().toString().length()-1) + ":\n" + s
            ,e.getMentiras().toString().substring(1, e.getMentiras().toString().length()-1) + ":\n" );
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELSE:
      jj_consume_token(ELSE);
      jj_consume_token(LLAI);
      s = Instrucciones();
      jj_consume_token(LLAD);
                                               etiquetasSalida.add("L" + contadorEtiquetas);
        i = new NodoIf(i.getInicio() + "go to L" + contadorEtiquetas++ + "\n" + i.getFin(), s);
        banderaElse = false;
      break;
    default:
      jj_la1[2] = jj_gen;
      ;
    }
        if(etiquetasSalida.size() != 0){
            if(banderaElse){
                etiquetasSalida.add("L" + contadorEtiquetas++);
                i = new NodoIf(i.getInicio() + "go to " + etiquetasSalida.getLast() + "\n", i.getFin());
            }

            i = new NodoIf(i.getInicio() + i.getFin(), etiquetasSalida.toString().substring(1, etiquetasSalida.toString().length()-1) + ":\n");
        }

        {if (true) return i;}
    throw new Error("Missing return statement in function");
  }

/** Condition -> CondicionAnd (OR CondicionAnd)*
*/
  final public NodoLogico Condition() throws ParseException {
 NodoLogico e, e1;
    e = CondicionAnd();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case OR:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(OR);
      e1 = CondicionAnd();
                                 LinkedList<String> listaPivote = new LinkedList<String>(e.getVerdades());
            listaPivote.addAll(e1.getVerdades());
            e = new NodoLogico(e.getCodigo() + e.getMentiras().toString().substring(1, e.getMentiras().toString().length()-1) + ":\n" + e1.getCodigo(), listaPivote, e1.getMentiras());
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** CondicionAnd -> CondicionUnaria (AND CondicionUnaria)*
*/
  final public NodoLogico CondicionAnd() throws ParseException {
 NodoLogico e, e1;
    e = CondicionUnaria();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case AND:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(AND);
      e1 = CondicionUnaria();
            LinkedList<String> listaPivote = new LinkedList<String>(e.getMentiras());
            listaPivote.addAll(e1.getMentiras());
            e = new NodoLogico(e.getCodigo() + e.getVerdades().toString().substring(1, e.getVerdades().toString().length()-1) + ":\n" + e1.getCodigo(), e1.getVerdades(), listaPivote);
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** CondicionUnaria -> NOT CondicionUnaria
                    | Relacionales
*/
  final public NodoLogico CondicionUnaria() throws ParseException {
 NodoLogico e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NOT:
      jj_consume_token(NOT);
      e = CondicionUnaria();
                                LinkedList<String> listaPivote = new LinkedList<String>(e.getVerdades());
        {if (true) return new NodoLogico (e.getCodigo(), e.getMentiras(), listaPivote);}
      break;
    case NUMERO:
    case PARENI:
      e = Relacionales();
                      {if (true) return e;}
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Relacionales -> NUMERO MAYOR NUMERO
              |  NUMERO MENOR NUMERO
              ETC
*/
  final public NodoLogico Relacionales() throws ParseException {
 NodoLogico e;
String primerNumero;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
              primerNumero = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAYOR:
        jj_consume_token(MAYOR);
        jj_consume_token(NUMERO);
                           {if (true) return new NodoLogico("if " + primerNumero + " > " + token.image + " go to L" + contadorEtiquetas++ + "\n" + "go to L"+ contadorEtiquetas-- + "\n", new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)), new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)));}
        break;
      case MENOR:
        jj_consume_token(MENOR);
        jj_consume_token(NUMERO);
                           {if (true) return new NodoLogico("if " + primerNumero + " < " + token.image + " go to L" + contadorEtiquetas++ + "\n" + "go to L"+ contadorEtiquetas-- + "\n", new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)), new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)));}
        break;
      case IGUAL:
        jj_consume_token(IGUAL);
        jj_consume_token(NUMERO);
                           {if (true) return new NodoLogico("if " + primerNumero + " == " + token.image + " go to L" + contadorEtiquetas++ + "\n" + "go to L"+ contadorEtiquetas-- + "\n", new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)), new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)));}
        break;
      case DESIGUAL:
        jj_consume_token(DESIGUAL);
        jj_consume_token(NUMERO);
                              {if (true) return new NodoLogico("if " + primerNumero + " != " + token.image + " go to L" + contadorEtiquetas++ + "\n" + "go to L"+ contadorEtiquetas-- + "\n", new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)), new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)));}
        break;
      case MAYORIGUAL:
        jj_consume_token(MAYORIGUAL);
        jj_consume_token(NUMERO);
                                {if (true) return new NodoLogico("if " + primerNumero + " >= " + token.image + " go to L" + contadorEtiquetas++ + "\n" + "go to L"+ contadorEtiquetas-- + "\n", new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)), new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)));}
        break;
      case MENORIGUAL:
        jj_consume_token(MENORIGUAL);
        jj_consume_token(NUMERO);
                                {if (true) return new NodoLogico("if " + primerNumero + " <= " + token.image + " go to L" + contadorEtiquetas++ + "\n" + "go to L"+ contadorEtiquetas-- + "\n", new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)), new LinkedList<String>(Arrays.asList("L" + contadorEtiquetas++)));}
        break;
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    case PARENI:
      jj_consume_token(PARENI);
      e = Condition();
      jj_consume_token(PAREND);
                                     {if (true) return e;}
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Expresion -> ExpresionMultiplicativa ('+' ExpresionMultiplicativa)*
              |  ExpresionMultiplicativa ('-' ExpresionMultiplicativa)*
*/
  final public NodoAritmetico Expresion() throws ParseException {
 NodoAritmetico e, e1;
    e = ExpresionMultiplicativa();
    label_5:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
      case MENOS:
        ;
        break;
      default:
        jj_la1[8] = jj_gen;
        break label_5;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MAS:
        jj_consume_token(MAS);
        e1 = ExpresionMultiplicativa();
            codigoSalida = "T"+contadorTemporales + "=" + e.getTemp().getValorTemporal() + "+" + e1.getTemp().getValorTemporal() + "\n";
                                            e = new NodoAritmetico(e.getCodigo() + e1.getCodigo() + codigoSalida, new Temporal(contadorTemporales++));
        break;
      case MENOS:
        jj_consume_token(MENOS);
        e1 = ExpresionMultiplicativa();
                                              codigoSalida = "T"+contadorTemporales + "=" + e.getTemp().getValorTemporal() + "-" + e1.getTemp().getValorTemporal() + "\n";
                                            e = new NodoAritmetico(e.getCodigo() + e1.getCodigo() + codigoSalida, new Temporal(contadorTemporales++));
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionMultiplicativa -> ExpresionUnaria ('*' ExpresionUnaria)*
                            |  ExpresionUnaria ('/' ExpresionUnaria)*
*/
  final public NodoAritmetico ExpresionMultiplicativa() throws ParseException {
 NodoAritmetico e, e1;
    e = ExpresionUnaria();
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
      case DIV:
        ;
        break;
      default:
        jj_la1[10] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case POR:
        jj_consume_token(POR);
        e1 = ExpresionUnaria();
                                    codigoSalida = "T"+contadorTemporales + "=" + e.getTemp().getValorTemporal() + "*" + e1.getTemp().getValorTemporal() + "\n";
                                    e = new NodoAritmetico(e.getCodigo() + e1.getCodigo() + codigoSalida, new Temporal(contadorTemporales++));
        break;
      case DIV:
        jj_consume_token(DIV);
        e1 = ExpresionUnaria();
                                    codigoSalida = "T"+contadorTemporales + "=" + e.getTemp().getValorTemporal() + "/" + e1.getTemp().getValorTemporal() + "\n";
                                    e = new NodoAritmetico(e.getCodigo() + e1.getCodigo() + codigoSalida, new Temporal(contadorTemporales++));
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
     {if (true) return e;}
    throw new Error("Missing return statement in function");
  }

/** ExpresionUnaria -> '-' ExpresionUnaria
                    |  Primitivo
 */
  final public NodoAritmetico ExpresionUnaria() throws ParseException {
 NodoAritmetico e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MENOS:
      jj_consume_token(MENOS);
      e = ExpresionUnaria();
        codigoSalida = "T"+contadorTemporales + "=" + "-" + e.getTemp().getValorTemporal() + "\n";
        {if (true) return new NodoAritmetico(e.getCodigo() + codigoSalida, new Temporal(contadorTemporales++));}
      break;
    case NUMERO:
    case DECIMAL:
    case PARENI:
      e = Primitivo();
                   {if (true) return e;}
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

/** Primitivo -> Numero
              |  Decimal
              |  '(' Expresion ')' 
*/
  final public NodoAritmetico Primitivo() throws ParseException {
 NodoAritmetico e;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUMERO:
      jj_consume_token(NUMERO);
              {if (true) return new NodoAritmetico("", new Temporal((token.image)));}
      break;
    case DECIMAL:
      jj_consume_token(DECIMAL);
               {if (true) return new NodoAritmetico("", new Temporal((token.image)));}
      break;
    case PARENI:
      jj_consume_token(PARENI);
      e = Expresion();
      jj_consume_token(PAREND);
                                     {if (true) return e;}
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_3_1() {
    if (jj_scan_token(ELSE)) return true;
    if (jj_scan_token(IF)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public GramaticaTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  /** Whether we are looking ahead. */
  private boolean jj_lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[14];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1d80,0x1d80,0x200,0x40000000,0x80000000,0x4020,0x3f000000,0x4020,0x300000,0x300000,0xc00000,0xc00000,0x204060,0x4060,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Gramatica(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Gramatica(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Gramatica(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new GramaticaTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Gramatica(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(GramaticaTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 14; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = jj_lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List jj_expentries = new java.util.ArrayList();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Iterator it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.add(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[33];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 14; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 33; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
